install.packages("rmarkdown")
?knitr2html
library(dplyr)
library(ggplot2)
library(lubridate)
install.packages("ggplot2")
destfile <- "stormData.csv.bz2"
download.file(URL, destfile)
df <- tbl_df(read.csv(destfile, header = TRUE, na.strings = "NA" ))
from <- mdy_hms("01-01-2001 0:00:00")
to <- mdy_hms("12-01-2011 0:00:00")
required.data <- select(df, BGN_DATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
mutate(BGN_DATE = mdy_hms(BGN_DATE)) %>%
filter(BGN_DATE > from & BGN_DATE < to)
health.impact <- group_by(required.data, EVTYPE) %>%
summarize(fatalities = sum(FATALITIES), injuries = sum(INJURIES)) %>%
filter(fatalities > 0 | injuries > 0)
qplot(x = injuries, y = EVTYPE, data = health.impact)
library(dplyr)
library(ggplot2)
library(lubridate)
destfile <- "stormData.csv.bz2"
df <- tbl_df(read.csv(destfile, header = TRUE, na.strings = "NA" ))
from <- mdy_hms("01-01-2001 0:00:00")
to <- mdy_hms("12-01-2011 0:00:00")
required.data <- select(df, BGN_DATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
mutate(BGN_DATE = mdy_hms(BGN_DATE)) %>%
filter(BGN_DATE > from & BGN_DATE < to)
health.impact <- group_by(required.data, EVTYPE) %>%
summarize(fatalities = sum(FATALITIES), injuries = sum(INJURIES)) %>%
filter(fatalities > 0 | injuries > 0)
qplot(x = injuries, y = EVTYPE, data = health.impact)
working.directory <- "C:/coursera/RepData_PeerAssessment2"
df <- tbl_df(read.csv(destfile, header = TRUE, na.strings = "NA" ))
from <- mdy_hms("01-01-2001 0:00:00")
to <- mdy_hms("12-01-2011 0:00:00")
required.data <- select(df, BGN_DATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
mutate(BGN_DATE = mdy_hms(BGN_DATE)) %>%
filter(BGN_DATE > from & BGN_DATE < to)
health.impact <- group_by(required.data, EVTYPE) %>%
summarize(fatalities = sum(FATALITIES), injuries = sum(INJURIES)) %>%
filter(fatalities > 0 | injuries > 0)
qplot(x = injuries, y = EVTYPE, data = health.impact)
destfile <- "stormData.csv.bz2"
df <- tbl_df(read.csv(destfile, header = TRUE, na.strings = "NA" ))
library(dplyr)
library(ggplot2)
library(lubridate)
working.directory <- "C:/coursera/RepData_PeerAssessment2"
getExp <- function(e) {
if (e %in% c("h", "H"))
return(2)
else if (e %in% c("k", "K"))
return(3)
else if (e %in% c("m", "M"))
return(6)
else if (e %in% c("b", "B"))
return(9)
else if (!is.na(as.numeric(e)))
return(as.numeric(e))
else if (e %in% c("", "-", "?", "+"))
return(0)
else {
stop("Invalid value.")
}
}
URL <- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
destfile <- "stormData.csv.bz2"
download.file(URL, destfile)
df <- tbl_df(read.csv(destfile, header = TRUE, na.strings = "NA" ))
from <- mdy_hms("01-01-2001 0:00:00")
to <- mdy_hms("12-01-2011 0:00:00")
required.data <- select(df, BGN_DATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
mutate(BGN_DATE = mdy_hms(BGN_DATE)) %>%
filter(BGN_DATE > from & BGN_DATE < to)
health.impact <- group_by(required.data, EVTYPE) %>%
summarize(fatalities = sum(FATALITIES), injuries = sum(INJURIES)) %>%
filter(fatalities > 0 | injuries > 0)
qplot(x = injuries, y = EVTYPE, data = health.impact)
summary(health.impact)
qplot(x = injuries, y = EVTYPE, data = health.impact, geom="bar", stat="identity",
position="dodge")
qplot(x = injuries, y = EVTYPE, data = health.impact, geom="bar", position="dodge")
?qplot
qplot(x = injuries, y = EVTYPE, data = health.impact, geom="path")
ggplot(health.impact, aes(x = factor(injuries), y = EVTYPE)) + geom_bar(stat = "identity")
health.impact
?arrange
arrange(health.impact, fatalities, injuries)
arrange(health.impact, desc(fatalities), injuries)
casualties <- arrange(health.impact, desc(fatalities), injuries)
casualties
casualties <- casualties[,1:10]
casualties <- casualties[1:10,]
casualties
health.impact <- group_by(required.data, EVTYPE) %>%
summarize(fatalities = sum(FATALITIES), injuries = sum(INJURIES)) %>%
filter(fatalities > 0 | injuries > 0)
casualties <- arrange(health.impact, desc(fatalities), injuries)
qplot(x = injuries, y = EVTYPE, data = casualties[1:10,], geom="path")
ggplot(casualties[1:10,], aes(x = factor(injuries), y = EVTYPE)) + geom_bar(stat = "identity")
qplot(x = injuries, y = EVTYPE, data = casualties[1:10,])
ggplot(casualties[1:10,], aes(x = injuries, y = EVTYPE)) + geom_bar(stat = "identity")
ggplot(casualties[1:10,], aes(x = factor(injuries), y = EVTYPE)) + geom_bar(stat = "identity")
ggplot(casualties[1:10,], aes(x = EVTYPE, y = injuries)) + geom_bar(stat = "identity")
ggplot(casualties[1:10,], aes(x = EVTYPE, y = fatalities)) + geom_bar(stat = "identity")
casualties
ggplot(casualties[1:10,], aes(x = factor(EVTYPE), y = fatalities)) + geom_bar(stat = "identity")
casualties <- arrange(health.impact, desc(fatalities))
casualties
ggplot(casualties[1:5,], aes(x = factor(EVTYPE), y = fatalities)) + geom_bar(stat = "identity")
ggplot(casualties[1:5,], aes(x = factor(EVTYPE), y = fatalities))
+ geom_bar(stat = "identity")
+ xlab("Weather Event") + ylab("Number of Fatalities")
ggplot(casualties[1:5,], aes(x = factor(EVTYPE), y = fatalities))
+ geom_bar(stat = "identity")
+ guides(fill = FALSE)
+ xlab("Weather Event") + ylab("Number of Fatalities")
ggplot(casualties[1:5,], aes(x = factor(EVTYPE), y = fatalities)) +
geom_bar(stat = "identity") +
guides(fill = FALSE) + xlab("Weather Event") + ylab("Number of Fatalities")
ggplot(casualties[1:5,], aes(x = factor(EVTYPE), y = fatalities)) +
geom_bar(stat = "identity")
ggplot(casualties[1:5,], aes(x = factor(EVTYPE), y = fatalities)) +
geom_bar(stat = "identity") +
guides(fill = FALSE)
ggplot(casualties[1:5,], aes(x = factor(EVTYPE), y = fatalities)) +
geom_bar(stat = "identity") +
guides(fill = FALSE) + xlab("Weather Event")
ggplot(casualties[1:5,], aes(x = factor(EVTYPE), y = fatalities)) +
geom_bar(stat = "identity") +
guides(fill = FALSE) + xlab("Weather Event") + ylab("Number of Fatalities")
ggplot(casualties[1:5,], aes(x = factor(EVTYPE), y = fatalities)) +
geom_bar(stat = "identity") +
guides(fill = FALSE) + xlab("Weather Event") + ylab("Number of Fatalities") +
ggtitle("Fatalities due to Severe Weather Events")
df <- tbl_df(read.csv(destfile, header = TRUE, na.strings = "NA" ))
from <- mdy_hms("01-01-2001 0:00:00")
to <- mdy_hms("12-01-2011 0:00:00")
required.data <- select(df, BGN_DATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
mutate(BGN_DATE = mdy_hms(BGN_DATE)) %>%
filter(BGN_DATE > from & BGN_DATE < to)
health.impact <- group_by(required.data, EVTYPE) %>%
summarize(fatalities = sum(FATALITIES), injuries = sum(INJURIES)) %>%
filter(fatalities > 0 | injuries > 0)
casualties <- arrange(health.impact, desc(fatalities))
#ggplot(casualties[1:10,], aes(x = factor(injuries), y = EVTYPE)) + geom_bar(stat = "identity")
ggplot(casualties[1:5,], aes(x = factor(EVTYPE), y = fatalities)) +
geom_bar(stat = "identity") +
guides(fill = FALSE) + xlab("Weather Event") + ylab("Number of Fatalities") +
ggtitle("Fatalities due to Severe Weather Events")
library(car)
ggplot(casualties[1:5,], aes(x = factor(EVTYPE), y = injuries)) +
geom_bar(stat = "identity") +
guides(fill = FALSE) + xlab("Weather Event") + ylab("Number of Injuries") +
ggtitle("Injuries due to Severe Weather Events")
required.data$PROPDMG.B <- recode(as.character(required.data$PROPDMGEXP), "'K'=1e-6; 'M'=1e-3;'B'=1;''=0")
required.data$PROPDMG.B <- recode(as.character(required.data$PROPDMGEXP), "'K'=1e-6; 'M'=1e-3;'B'=1;''=0")
required.data$PROPDMG.B <- required.data$PROPDMG.B * required.data$PROPDMG
required.data$CROPDMG.B <- recode(as.character(required.data$CROPDMGEXP), "'K'=1e-6; 'M'=1e-3;'B'=1;''=0")
required.data$CROPDMG.B <- required.data$CROPDMG.B * required.data$CROPDMG
event.cost <- required.data[, lapply(.SD, sum), by = EVTYPE, .SDcols = c("PROPDMG.B",
"CROPDMG.B")]
summary(event.cost)
event.cost <- group_by(required.data, EVTYPE) %>%
summarize(property.dmg = sum(PROPDMG.B), crop.dmg = sum(CROPDMG.B))
summary(event.cost)
event.cost
required.data <- select(df, BGN_DATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
mutate(BGN_DATE = mdy_hms(BGN_DATE)) %>%
filter(BGN_DATE > from & BGN_DATE < to)
health.impact <- group_by(required.data, EVTYPE) %>%
summarize(fatalities = sum(FATALITIES), injuries = sum(INJURIES)) %>%
filter(fatalities > 0 | injuries > 0)
casualties <- arrange(health.impact, desc(fatalities))
#ggplot(casualties[1:10,], aes(x = factor(injuries), y = EVTYPE)) + geom_bar(stat = "identity")
ggplot(casualties[1:5,], aes(x = factor(EVTYPE), y = fatalities)) +
geom_bar(stat = "identity") +
guides(fill = FALSE) + xlab("Weather Event") + ylab("Number of Fatalities") +
ggtitle("Fatalities due to Severe Weather Events")
ggplot(casualties[1:5,], aes(x = factor(EVTYPE), y = injuries)) +
geom_bar(stat = "identity") +
guides(fill = FALSE) + xlab("Weather Event") + ylab("Number of Injuries") +
ggtitle("Injuries due to Severe Weather Events")
required.data$PROPDMG.B <- recode(as.character(required.data$PROPDMGEXP), "'K'=1e-6; 'M'=1e-3;'B'=1;''=0")
required.data$PROPDMG.B <- required.data$PROPDMG.B * required.data$PROPDMG
required.data$CROPDMG.B <- recode(as.character(required.data$CROPDMGEXP), "'K'=1e-6; 'M'=1e-3;'B'=1;''=0")
required.data$CROPDMG.B <- required.data$CROPDMG.B * required.data$CROPDMG
event.cost <- group_by(required.data, EVTYPE) %>%
summarize(property.dmg = sum(PROPDMG.B), crop.dmg = sum(CROPDMG.B))
event.cost
arrange(event.cost, desc(property.dmg))
arrange(event.cost, desc(crop.dmg))
event.cost.sub <- mutate(event.cost, total = property.dmg + crop.dmg)
event.cost.sub
arrange(event.cost.sub, desc(total))
event.cost.sub <- mutate(event.cost, total = property.dmg + crop.dmg) %>%
arrange(desc(total))
event.cost.sub
ggplot(event.cost.sub[1:5,], aes(x = factor(EVTYPE), y = total)) +
geom_bar(stat = "identity") +
guides(fill = FALSE) + xlab("Weather Event") + ylab("Economic Impact (USD)") +
ggtitle("Economic Cost due to Severe Weather Events")
ggplot(event.cost.sub[1:5,], aes(x = factor(EVTYPE), y = total)) +
geom_bar(stat = "identity") +
guides(fill = FALSE) + xlab("Weather Event") + ylab("Economic Impact (USD in Bilions)") +
ggtitle("Economic Cost due to Severe Weather Events")
source("meaningcloud-api-call.R")
source("json-flattener.R")
## Set the message and define the language
## en - english
## es - spanish
## sv - slovenian
setJSONCall("La conexión que hay entre nosotros es mejor que el 4G de telcel", "es")
## Send a text message to MeaningCloud.com REST API and retrieve a JSON message
output <- getJSONMessage()
## We define the JSON response to flatten
setJSONMessageToFlatten(output)
## Retrive flattened JSON file
df <- getFlatJSON()
df
setwd("C:/Users/Gaming/Dropbox/workspace/data-science/mdc.sa/src")
source("meaningcloud-api-call.R")
source("json-flattener.R")
## Set the message and define the language
## en - english
## es - spanish
## sv - slovenian
setJSONCall("La conexión que hay entre nosotros es mejor que el 4G de telcel", "es")
## Send a text message to MeaningCloud.com REST API and retrieve a JSON message
output <- getJSONMessage()
## We define the JSON response to flatten
setJSONMessageToFlatten(output)
## Retrive flattened JSON file
df <- getFlatJSON()
df
install.packages('curl')
source("meaningcloud-api-call.R")
source("json-flattener.R")
## Set the message and define the language
## en - english
## es - spanish
## sv - slovenian
setJSONCall("La conexión que hay entre nosotros es mejor que el 4G de telcel", "es")
## Send a text message to MeaningCloud.com REST API and retrieve a JSON message
output <- getJSONMessage()
## We define the JSON response to flatten
setJSONMessageToFlatten(output)
## Retrive flattened JSON file
df <- getFlatJSON()
df
source("meaningcloud-api-call.R")
source("json-flattener.R")
## Set the message and define the language
## en - english
## es - spanish
## sv - slovenian
setJSONCall("Pepsi se la baño con su anuncio", "es")
## Send a text message to MeaningCloud.com REST API and retrieve a JSON message
output <- getJSONMessage()
## We define the JSON response to flatten
setJSONMessageToFlatten(output)
## Retrive flattened JSON file
df <- getFlatJSON()
df
source("meaningcloud-api-call.R")
source("json-flattener.R")
## Set the message and define the language
## en - english
## es - spanish
## sv - slovenian
setJSONCall("Pepsi se paso con su anuncio", "es")
## Send a text message to MeaningCloud.com REST API and retrieve a JSON message
output <- getJSONMessage()
## We define the JSON response to flatten
setJSONMessageToFlatten(output)
## Retrive flattened JSON file
df <- getFlatJSON()
df
source("meaningcloud-api-call.R")
source("json-flattener.R")
## Set the message and define the language
## en - english
## es - spanish
## sv - slovenian
setJSONCall("Pepsi se paso con su anuncio", "es")
## Send a text message to MeaningCloud.com REST API and retrieve a JSON message
output <- getJSONMessage()
## We define the JSON response to flatten
setJSONMessageToFlatten(output)
## Retrive flattened JSON file
df <- getFlatJSON()
df
source("meaningcloud-api-call.R")
source("json-flattener.R")
## Set the message and define the language
## en - english
## es - spanish
## sv - slovenian
setJSONCall("Muchas gracias por su apoyo", "es")
## Send a text message to MeaningCloud.com REST API and retrieve a JSON message
output <- getJSONMessage()
## We define the JSON response to flatten
setJSONMessageToFlatten(output)
## Retrive flattened JSON file
df <- getFlatJSON()
df
source("meaningcloud-api-call.R")
source("json-flattener.R")
## Set the message and define the language
## en - english
## es - spanish
## sv - slovenian
setJSONCall("Muchas gracias por su apoyo", "es")
## Send a text message to MeaningCloud.com REST API and retrieve a JSON message
output <- getJSONMessage()
## We define the JSON response to flatten
setJSONMessageToFlatten(output)
## Retrive flattened JSON file
df <- getFlatJSON()
df
source("meaningcloud-api-call.R")
source("json-flattener.R")
## Set the message and define the language
## en - english
## es - spanish
## sv - slovenian
setJSONCall("Muchas gracias por su apoyo", "es")
## Send a text message to MeaningCloud.com REST API and retrieve a JSON message
output <- getJSONMessage()
## We define the JSON response to flatten
setJSONMessageToFlatten(output)
## Retrive flattened JSON file
df <- getFlatJSON()
df
source("meaningcloud-api-call.R")
source("json-flattener.R")
## Set the message and define the language
## en - english
## es - spanish
## sv - slovenian
setJSONCall("Muchas gracias por su apoyo", "es")
## Send a text message to MeaningCloud.com REST API and retrieve a JSON message
output <- getJSONMessage()
## We define the JSON response to flatten
setJSONMessageToFlatten(output)
## Retrive flattened JSON file
df <- getFlatJSON()
df
source("meaningcloud-api-call.R")
source("json-flattener.R")
## Set the message and define the language
## en - english
## es - spanish
## sv - slovenian
setJSONCall("Muchas gracias por su apoyo", "es")
## Send a text message to MeaningCloud.com REST API and retrieve a JSON message
output <- getJSONMessage()
## We define the JSON response to flatten
setJSONMessageToFlatten(output)
## Retrive flattened JSON file
df <- getFlatJSON()
df
source("meaningcloud-api-call.R")
source("json-flattener.R")
## Set the message and define the language
## en - english
## es - spanish
## sv - slovenian
setJSONCall("Muchas gracias por su apoyo", "es")
## Send a text message to MeaningCloud.com REST API and retrieve a JSON message
output <- getJSONMessage()
## We define the JSON response to flatten
setJSONMessageToFlatten(output)
## Retrive flattened JSON file
df <- getFlatJSON()
df
source("meaningcloud-api-call.R")
source("json-flattener.R")
## Set the message and define the language
## en - english
## es - spanish
## sv - slovenian
setJSONCall("Scammer with no class. Don't buy unless you like wasting money", "en")
## Send a text message to MeaningCloud.com REST API and retrieve a JSON message
output <- getJSONMessage()
## We define the JSON response to flatten
setJSONMessageToFlatten(output)
## Retrive flattened JSON file
df <- getFlatJSON()
df
source("meaningcloud-api-call.R")
source("json-flattener.R")
## Set the message and define the language
## en - english
## es - spanish
## sv - slovenian
setJSONCall("Sunny day", "en")
## Send a text message to MeaningCloud.com REST API and retrieve a JSON message
output <- getJSONMessage()
## We define the JSON response to flatten
setJSONMessageToFlatten(output)
## Retrive flattened JSON file
df <- getFlatJSON()
df
